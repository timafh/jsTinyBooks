process.on('uncaughtException', err => {
    console.error('There was an uncaught error', err);
    process.exit(1); // mandatory (as per the Node.js docs)
});

try {
    const { jsPDF } = require("jspdf");
    const fs = require("fs");
    const options = require('./src/commandline-args');
    const { ColorHelper, Color } = require('./src/color-helper');
    const FileHelper = require("./src/file-helper");
    const jsPDFHelper = require("./src/jspdf-helper");
    const PatternPluginsManager = require("./src/pattern-plugins-manager");
    require("./src/math-helper")();

    const document = new jsPDF({
        orientation: "portrait",
        unit: 'mm',
        format: options.format
    });

    document.deletePage(1);


    const scaleBookConfig = (bookConfig) => {
        bookConfig.scaled_width = Math.scaleDownValue(bookConfig.width, options.scale);
        bookConfig.scaled_height = Math.scaleDownValue(bookConfig.height, options.scale);
        bookConfig.scaled_depth = Math.scaleDownValue(bookConfig.depth, options.scale);
    };

    const foldingAreaBackgroundColor = new Color(220, 220, 220);
    const foldingAreaFoldingLinesColor = new Color(189, 189, 189);

    const pm = new PatternPluginsManager();
    pm.initPatternPlugins();

    options.bookConfigs.forEach((bookConfig) => {
        const doc = document.addPage();
        scaleBookConfig(bookConfig);
        bookConfig.spineX = options.pageMargins.left + bookConfig.scaled_depth;
        let countY = Math.floor((doc.internal.pageSize.getHeight() - (options.pageMargins.top + options.pageMargins.bottom)) / (bookConfig.scaled_height + 4));
        const realEndWidth = doc.internal.pageSize.getWidth() - (bookConfig.scaled_width + (2 * bookConfig.scaled_depth) + options.pageMargins.left + options.pageMargins.right);
        const fullBookWidth = options.pageMargins.left + (bookConfig.scaled_depth * 2) + bookConfig.scaled_width;
        const countOfEndSegments = Math.floor(realEndWidth / bookConfig.scaled_depth);
        const usedEndWidth = countOfEndSegments * bookConfig.scaled_depth;

        let currentY = options.pageMargins.top;

        for (let yC = 0; yC < countY; yC++) {

            bookConfig.color = ColorHelper.getRandomColor();
            bookConfig.shadedColor = bookConfig.color.getLighterShade(0.15);
            bookConfig.currentY = currentY;

            jsPDFHelper.setFillColor(bookConfig.shadedColor, doc);
            doc.rect(options.pageMargins.left, currentY, bookConfig.scaled_depth, bookConfig.scaled_height, "F");
            jsPDFHelper.setFillColor(bookConfig.color, doc);
            doc.rect(options.pageMargins.left + bookConfig.scaled_depth, currentY, bookConfig.scaled_width, bookConfig.scaled_height, "F");
            jsPDFHelper.setFillColor(bookConfig.shadedColor, doc);
            doc.rect((options.pageMargins.left + bookConfig.scaled_depth + bookConfig.scaled_width), currentY, bookConfig.scaled_depth, bookConfig.scaled_height, "F");

            if (!options.nofoldingarea) {
                jsPDFHelper.setFillColor(foldingAreaBackgroundColor, doc);
                doc.rect(fullBookWidth, currentY, usedEndWidth, bookConfig.scaled_height, "F");

                jsPDFHelper.setDrawColor(foldingAreaFoldingLinesColor, doc);

                for (let x = 1; x <= countOfEndSegments; x++) {
                    doc.line((fullBookWidth + x * bookConfig.scaled_depth), currentY, (fullBookWidth + x * bookConfig.scaled_depth), currentY + bookConfig.scaled_height);
                }
            }


            if (!options.nopatterns) {
                pm.createPatternWithRandomPlugin(bookConfig, doc);
            }

            currentY += bookConfig.scaled_height + 4;
        }

        doc.setFontSize(6.5);
        doc.text(7, doc.internal.pageSize.getHeight() - 10, "Books generated by jsTinyBooks by timafh\nReal Width: " + bookConfig.width + "mm | Real Height: " + bookConfig.height + "mm | Real Depth: " + bookConfig.depth + "mm\nModel Scale: 1:" + bookConfig.scale + "\nScaled Width: " + bookConfig.scaled_width.toFixed(2) + "mm | Scaled Height: " + bookConfig.scaled_height.toFixed(2) + "mm | Scaled Depth: " + bookConfig.scaled_depth.toFixed(2) + "mm\nUsed Seed: " + options.seed + " (you can use this with --seed " + options.seed + " to reproduce this exact same sheet)", null, 90);

    });

    document.save("books.pdf");

    if (options.print) {
        const { print } = require("pdf-to-printer");
        console.log("printing");

        print("books.pdf").then(() => {
            fs.rmSync("books.pdf");
        });
    }
} catch (error) {
    console.error(error.message);
}